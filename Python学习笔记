1/ 列表推导式用来初始化列表或者进行一些操作，可以提高效率
复制list，用切片，nwe_list = old_list[:]
判断数据是否在/不在list中，可以用 "test" in/not in list_tests，返回值是True或False

2/ PEP8是python的编程规范，建议缩进为4个空格（可以在编辑器里设置4个空格为Tab制表符），行长建议79个字符。

3/ 数字表达中，100_00=10000

4/ 元组实际上等于去掉括号（）的格式，example = (1,2,3,) 等价于 example = 1,2,3,，元组最后要用","，结束，   

5/ Python 中的假值包括：
    数值 0、0.0、0j。
    空序列 []、()、''、""、b""。
    空集合 {}、set()。
    特殊值 None 和 False。
    
    1. 数值类型
    整数 0：bool(0) 返回 False。
    浮点数 0.0：bool(0.0) 返回 False。
    复数 0j：bool(0j) 返回 False。
    
    2. 空序列
    空列表 []：bool([]) 返回 False。
    空元组 ()：bool(()) 返回 False。
    空字符串 ""、''：bool("") 返回 False。
    空字节串 b""：bool(b"") 返回 False。
    
    3. 空集合
    空字典 {}：bool({}) 返回 False。
    空集合 set()：bool(set()) 返回 False。
    
    4. 特殊值
    None：bool(None) 返回 False。
    False：bool(False) 返回 False。
    
    5. 自定义对象的假值行为
    对于自定义类，可以通过定义 __bool__() 或 __len__() 方法来控制其实例在布尔上下文中的行为：
    如果定义了 __bool__()，则调用该方法。
    如果未定义 __bool__() 但定义了 __len__()，则根据 __len__() 的返回值判断（0 为 False，非零为 True）。
    如果两者都未定义，则实例始终为 True。

6/ 字典类型，用get()进行获取，可以指定键值不存在的返回信息get('asd0','message')，如果不指定，则返回None。
遍历字典键值对：for k, v in dic.items():
遍历字典键：for k in dic.keys(): 
//等同于 for k in dic:
//显式的使用keys(),可以让代码更容易读懂，
//keys()返回一个list，所以可以用sorted(dic.keys())进行排序（这个排序不影响原字典键的顺序）
遍历字典值：for k, v in dic.values():
//键不会重复，但值会重复，如果对于返回的值进行集合处理，就可以去重复，set(for k, v in dic.values())

7/ 集合初始化{}中必须有内容，不然就是空字典
集合类型，set() 的参数要求
set() 的参数可以是以下任意一种可迭代对象：
列表（list）：例如 set([1, 2, 3])。
元组（tuple）：例如 set((1, 2, 3))。
字符串（str）：例如 set("hello")（注意：字符串会被拆分为单个字符）。
集合（set）：例如 set({1, 2, 3})。
字典（dict）：例如 set({"a": 1, "b": 2})（注意：只会使用字典的键）。
其他可迭代对象：例如 set(range(5))。

8/ for 和 while 都可以有 else 语句。

9/ Python中的 pass 语句是一个空操作语句，它不执行任何操作。这个语句主要用于以下几个目的：
占位符:
当语法需要一个语句，但程序不需要执行任何操作时使用。

创建最小结构的类或函数：
当你想定义一个函数或类，但还没有想好具体实现时。

在条件语句中：
当你需要处理一个条件，但暂时不需要执行任何操作时。

保持程序结构的完整性：
在开发过程中，用作临时的占位符，以保证代码结构的完整。

避免语法错误：
在Python中，空的代码块会导致语法错误，pass 可以避免这种错误。

10/ 程序
def greetPerson(*name):
    print('Hello', name)
  
greetPerson('Runoob', 'Google')

>>> Hello ('Runoob', 'Google')
加了星号 * 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。

11/ 以下 Python 代码输出结果是什么?

print(0.1 + 0.2 == 0.3)
>>>False

因为有精度问题：

>>> print(0.1 + 0.2 == 0.3)
False
>>> print(0.1+0.2)
0.30000000000000004
>>> 
可以使用 math 的 isclose 代替：

>>> import math
>>> math.isclose(0.1 + 0.2, 0.3)
True

12/ 字符串里面的%是一个普通字符怎么办？这个时候就需要转义，用%%来表示一个%：
>>> 'growth rate: %d %%' % 7
'growth rate: 7 %'
